{"version":3,"sources":["pages/Home/CreateForm/index.js","pages/Home/index.js","utils.js"],"names":["CreateForm","onFinish","Form","useForm","form","style","display","padding","textAlign","flexDirection","height","minHeight","background","initialValues","games","type","maxWidth","margin","width","List","name","fields","add","remove","map","field","index","marginBottom","border","Item","required","disabled","length","Option","value","noStyle","shouldUpdate","getFieldValue","placeholder","MinusCircleOutlined","cursor","fontSize","color","transition","onClick","icon","PlusOutlined","htmlType","Home","values","newUrl","window","location","encodeObj","copyToClipboard","message","success","compareStrings","a","b","similarity","stringSimilarity","compareTwoStrings","toLowerCase","console","log","shiftChars","str","amount","split","String","fromCharCode","charCodeAt","join","obj","encode","JSON","stringify","decodeObj","parse","decode","encodeURIComponent","decodeURIComponent","el","document","createElement","body","appendChild","select","execCommand","removeChild"],"mappings":"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","file":"static/js/6.1000d0f4.chunk.js","sourcesContent":["import React from \"react\"\nimport { Form, Input, Button, Select } from \"antd\"\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\"\n\nconst CreateForm = ({ onFinish }) => {\n  const [form] = Form.useForm()\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        padding: \"20px\",\n        textAlign: \"center\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        minHeight: \"100vh\",\n        background: \"#f7f7f7\",\n      }}\n    >\n      <Form\n        form={form}\n        initialValues={{ games: [{ type: \"redirect\" }] }}\n        onFinish={onFinish}\n        style={{ maxWidth: 500, margin: \"auto\", width: \"100%\" }}\n      >\n        <Form.List name=\"games\">\n          {(fields, { add, remove }) => (\n            <>\n              {fields.map((field, index) => {\n                return (\n                  <div\n                    style={{ padding: 20, background: \"#fefefe\", marginBottom: 20, border: \"1px solid #f0f0f0\", width: \"100%\" }}\n                    key={index}\n                  >\n                    <Form.Item {...field}  required={false} name={[field.name, \"type\"]}>\n                      <Select style={{ width: \"100%\" }} disabled={index === fields.length - 1}>\n                        <Select.Option value=\"question\">Question</Select.Option>\n                        <Select.Option value=\"redirect\">Redirect</Select.Option>\n                      </Select>\n                    </Form.Item>\n                    <Form.Item noStyle shouldUpdate={true}>\n                      {({ getFieldValue }) => {\n                        return getFieldValue([\"games\", field.name, \"type\"]) === \"question\" ? (\n                          <>\n                            <Form.Item name={[field.name, \"question\"]}>\n                              <Input placeholder=\"Your question here\" />\n                            </Form.Item>\n                            <Form.Item name={[field.name, \"hint\"]}>\n                              <Input placeholder=\"Your hits here\" />\n                            </Form.Item>\n                            <Form.Item name={[field.name, \"answers\"]}>\n                              <Input placeholder=\"Comma separated answers\" />\n                            </Form.Item>\n                          </>\n                        ) : null\n                      }}\n                    </Form.Item>\n                    <Form.Item noStyle shouldUpdate={true}>\n                      {({ getFieldValue }) => {\n                        return getFieldValue([\"games\", field.name, \"type\"]) === \"redirect\" ? (\n                          <>\n                            <Form.Item name={[field.name, \"url\"]}>\n                              <Input type=\"url\" placeholder=\"Your URL here\" />\n                            </Form.Item>\n                          </>\n                        ) : null\n                      }}\n                    </Form.Item>\n                    {index < fields.length - 1 && (\n                      <MinusCircleOutlined\n                        style={{\n                          margin: \"8px\",\n                          cursor: \"pointer\",\n                          fontSize: \"24px\",\n                          color: \"#999\",\n                          transition: \"all 0.3s\",\n                        }}\n                        onClick={() => remove(field.name)}\n                      />\n                    )}\n                  </div>\n                )\n              })}\n              <Form.Item>\n                <Button type=\"dashed\" onClick={() => add({}, fields.length - 1)} icon={<PlusOutlined />}>\n                  Add Game\n                </Button>\n              </Form.Item>\n            </>\n          )}\n        </Form.List>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Create &amp; Copy\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  )\n}\n\nexport default CreateForm\n","import React from \"react\"\nimport { encodeObj, copyToClipboard } from \"../../utils\"\nimport { message } from \"antd\"\nimport CreateForm from \"./CreateForm\"\n\nconst Home = () => (\n  <CreateForm\n    onFinish={(values) => {\n      const newUrl = window.location + encodeObj(values.games)\n      copyToClipboard(newUrl)\n      message.success(\"URL Copied\")\n    }}\n  />\n)\n\nexport default Home\n","import stringSimilarity from \"string-similarity\"\n\nexport const compareStrings = (a, b) => {\n  const similarity = stringSimilarity.compareTwoStrings(b.toLowerCase(), a.toLowerCase())\n  console.log(similarity)\n  return similarity\n}\n\nexport const shiftChars = (str, amount) => {\n  return str\n    .split(\"\")\n    .map((a) => String.fromCharCode(a.charCodeAt(0) + amount))\n    .join(\"\")\n}\n\nexport const encodeObj = (obj) => encode(JSON.stringify(obj))\nexport const decodeObj = (str) => JSON.parse(decode(str))\n\nexport const encode = (str) => {\n  str = shiftChars(str, -1)\n  return encodeURIComponent(str)\n}\n\nexport const decode = (str) => {\n  str = decodeURIComponent(str)\n  return shiftChars(str, 1)\n}\n\nexport const copyToClipboard = (str) => {\n  const el = document.createElement(\"textarea\")\n  el.value = str\n  document.body.appendChild(el)\n  el.select()\n  document.execCommand(\"copy\")\n  document.body.removeChild(el)\n}\n"],"sourceRoot":""}