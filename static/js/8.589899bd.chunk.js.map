{"version":3,"sources":["pages/Game/SimonSays/styles.module.scss","pages/Game/SimonSays/index.js"],"names":["module","exports","STATE_STARTING","STATE_SHOWING_ANSWERS","STATE_ANSWERING","STATE_LOST","SimonSays","options","onDone","rounds","React","useState","state","setState","answer","useRef","interval","currentAnswerIndex","currentGuessIndex","active","setActive","showNextAnswer","current","length","clearInterval","setTimeout","speed","handleClick","e","value","target","dataset","handleStartNewRound","handleStart","push","Math","floor","random","showAnswers","setInterval","useEffect","className","css","simon","screen","hidden","type","shape","size","onClick","container","Array","fill","map","o","i","isActive","cx","option","data-value"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,UAAY,0BAA0B,OAAS,uBAAuB,OAAS,uBAAuB,OAAS,yB,+HCIzJC,EAAiB,WACjBC,EAAwB,iBACxBC,EAAkB,YAClBC,EAAa,OAsFJC,UAjFG,SAAC,GAAyC,IAAD,IAAtCC,eAAsC,MAA5B,EAA4B,EAAzBC,EAAyB,EAAzBA,OAAyB,IAAjBC,cAAiB,MAAR,EAAQ,IAC/BC,IAAMC,SAAST,GADgB,mBAClDU,EADkD,KAC3CC,EAD2C,KAEnDC,EAASJ,IAAMK,OAAO,IACtBC,EAAWN,IAAMK,SACjBE,EAAqBP,IAAMK,QAAQ,GACnCG,EAAoBR,IAAMK,OAAO,GALkB,EAM7BL,IAAMC,WANuB,mBAMlDQ,EANkD,KAM1CC,EAN0C,KAQnDC,EAAiB,WACrBJ,EAAmBK,SAAW,EAC1BL,EAAmBK,SAAWR,EAAOQ,QAAQC,QAC/CC,cAAcR,EAASM,SACvBT,EAAST,GACTgB,MAEAA,EAAUN,EAAOQ,QAAQL,EAAmBK,UAC5CG,YAAW,kBAAML,MAAaM,OAI5BC,EAAc,SAACC,GACnB,GAAIhB,IAAUR,EAAd,CADyB,IAEjByB,EAAUD,EAAEE,OAAOC,QAAnBF,MACRX,EAAkBI,SAAW,EACzBR,EAAOQ,QAAQJ,EAAkBI,WAAaO,EAC5CX,EAAkBI,SAAWR,EAAOQ,QAAQC,OAAS,IACnDL,EAAkBI,QAAU,IAAMb,EAEpCD,IAEAwB,KAIJnB,EAASR,KAIP4B,EAAc,WAClBnB,EAAOQ,QAAU,GACjBU,KAGIA,EAAsB,WAC1BnB,EAASV,GACTc,EAAmBK,SAAW,EAC9BJ,EAAkBI,SAAW,EAC7BR,EAAOQ,QAAQY,KAAf,UAAuBC,KAAKC,MAAsB,EAAhBD,KAAKE,YACvCC,KAGIA,EAAc,WAClBtB,EAASM,QAAUiB,YAAYlB,EAtDrB,MA0DZ,OAFAX,IAAM8B,WAAU,kBAAM,kBAAMhB,cAAcR,EAASM,YAAU,IAG3D,sBAAKmB,UAAWC,IAAIC,MAApB,UACE,sBAAKF,UAAWC,IAAIE,OAAQC,OAAQjC,IAAUT,GAAyBS,IAAUR,EAAjF,UACE,cAAC,IAAD,CAAQ0C,KAAK,UAAUC,MAAM,QAAQC,KAAK,QAAQH,OAAQjC,IAAUV,EAAgB+C,QAAShB,EAA7F,mBAGA,cAAC,IAAD,CAAQa,KAAK,UAAUC,MAAM,QAAQC,KAAK,QAAQH,OAAQjC,IAAUP,EAAY4C,QAAShB,EAAzF,uBAGA,cAAC,IAAD,CAAQa,KAAK,UAAUC,MAAM,QAAQC,KAAK,QAAQH,OArExC,QAqEgDjC,EAAqBqC,QAASzC,EAAxF,kCAIF,qBAAKqC,OAAQjC,IAAUT,GAAyBS,IAAUR,EAAiBqC,UAAWC,IAAIQ,UAA1F,SACGC,MAAM5C,GACJ6C,OACAC,KAAI,SAACC,EAAGC,GACP,IAAMC,EAAWrC,IAAM,UAAQoC,GAC/B,OAAO,qBAAKd,UAAWgB,IAAGf,IAAIgB,OAAL,eAAgBhB,IAAIvB,OAASqC,IAAaG,aAAYJ,EAAWN,QAAStB,GAAZ4B","file":"static/js/8.589899bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"simon\":\"styles_simon__1cLSZ\",\"container\":\"styles_container__1E7j0\",\"option\":\"styles_option__ESRqo\",\"active\":\"styles_active__3xN89\",\"screen\":\"styles_screen__29VIn\"};","import React from \"react\"\nimport css from \"./styles.module.scss\"\nimport cx from \"classnames\"\nimport { Button } from \"antd\"\n\nconst STATE_STARTING = \"starting\"\nconst STATE_SHOWING_ANSWERS = \"showingAnswers\"\nconst STATE_ANSWERING = \"answering\"\nconst STATE_LOST = \"lost\"\nconst STATE_WON = \"won\"\n\nconst speed = 1000\n\nconst SimonSays = ({ options = 4, onDone, rounds = 6 }) => {\n  const [state, setState] = React.useState(STATE_STARTING)\n  const answer = React.useRef([])\n  const interval = React.useRef()\n  const currentAnswerIndex = React.useRef(-1)\n  const currentGuessIndex = React.useRef(0)\n  const [active, setActive] = React.useState()\n\n  const showNextAnswer = () => {\n    currentAnswerIndex.current += 1\n    if (currentAnswerIndex.current >= answer.current.length) {\n      clearInterval(interval.current)\n      setState(STATE_ANSWERING)\n      setActive()\n    } else {\n      setActive(answer.current[currentAnswerIndex.current])\n      setTimeout(() => setActive(), speed * 0.7)\n    }\n  }\n\n  const handleClick = (e) => {\n    if (state !== STATE_ANSWERING) return\n    const { value } = e.target.dataset\n    currentGuessIndex.current += 1\n    if (answer.current[currentGuessIndex.current] === value) {\n      if (currentGuessIndex.current >= answer.current.length - 1) {\n        if (currentGuessIndex.current + 1 === rounds) {\n          //   setState(STATE_WON)\n          onDone()\n        } else {\n          handleStartNewRound()\n        }\n      }\n    } else {\n      setState(STATE_LOST)\n    }\n  }\n\n  const handleStart = () => {\n    answer.current = []\n    handleStartNewRound()\n  }\n\n  const handleStartNewRound = () => {\n    setState(STATE_SHOWING_ANSWERS)\n    currentAnswerIndex.current = -1\n    currentGuessIndex.current = -1\n    answer.current.push(`${Math.floor(Math.random() * 4)}`)\n    showAnswers()\n  }\n\n  const showAnswers = () => {\n    interval.current = setInterval(showNextAnswer, speed)\n  }\n  React.useEffect(() => () => clearInterval(interval.current), [])\n\n  return (\n    <div className={css.simon}>\n      <div className={css.screen} hidden={state === STATE_SHOWING_ANSWERS || state === STATE_ANSWERING}>\n        <Button type=\"primary\" shape=\"round\" size=\"large\" hidden={state !== STATE_STARTING} onClick={handleStart}>\n          START\n        </Button>\n        <Button type=\"primary\" shape=\"round\" size=\"large\" hidden={state !== STATE_LOST} onClick={handleStart}>\n          TRY AGAIN\n        </Button>\n        <Button type=\"primary\" shape=\"round\" size=\"large\" hidden={state !== STATE_WON} onClick={onDone}>\n          YOU WON, Continue\n        </Button>\n      </div>\n      <div hidden={state !== STATE_SHOWING_ANSWERS && state !== STATE_ANSWERING} className={css.container}>\n        {Array(options)\n          .fill()\n          .map((o, i) => {\n            const isActive = active === `${i}`\n            return <div className={cx(css.option, { [css.active]: isActive })} data-value={i} key={i} onClick={handleClick}></div>\n          })}\n      </div>\n    </div>\n  )\n}\n\nexport default SimonSays\n\n// 621446539 -> modem tiene problema de se√±al\n"],"sourceRoot":""}