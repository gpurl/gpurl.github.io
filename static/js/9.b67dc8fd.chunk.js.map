{"version":3,"sources":["pages/Game/index.js","utils.js"],"names":["activities","question","lazy","simonSays","buttonClicks","pokemonTrivia","qrScan","redirect","props","window","location","replace","url","Game","code","useParams","history","useHistory","steps","useMemo","decodeObj","step","length","Component","type","onDone","encodeObj","slice","push","compareStrings","a","b","similarity","stringSimilarity","compareTwoStrings","toLowerCase","console","log","shiftChars","str","amount","min","max","split","map","charCodeAt","res","diff","String","fromCharCode","join","obj","encode","JSON","stringify","parse","decode","s","currChar","dict","data","out","phrase","i","lzw_encode","encodeURIComponent","oldPhrase","currCode","charAt","lzw_decode","decodeURIComponent","copyToClipboard","el","document","createElement","value","body","appendChild","select","execCommand","removeChild","message","success"],"mappings":"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","file":"static/js/9.b67dc8fd.chunk.js","sourcesContent":["import { lazy, useMemo } from \"react\"\nimport { useParams, useHistory } from \"react-router-dom\"\nimport { encodeObj, decodeObj } from \"../../utils\"\n\nconst activities = {\n  question: lazy(() => import(\"./Question\")),\n  simonSays: lazy(() => import(\"./SimonSays\")),\n  buttonClicks: lazy(() => import(\"./ButtonClicks\")),\n  pokemonTrivia: lazy(() => import(\"./PokemonTrivia\")),\n  qrScan: lazy(() => import(\"./QRScan\")),\n  redirect: (props) => {\n    window.location.replace(props.url)\n    return null\n  },\n}\n\nconst Game = () => {\n  const { code } = useParams()\n  const history = useHistory()\n  const steps = useMemo(() => decodeObj(code), [code])\n  const step = steps[steps.length - 1]\n\n  const Component = activities[step.type]\n\n  const handleDone = () => {\n    const url = encodeObj(steps.slice(0, -1))\n    history.push(`/${url}`)\n  }\n\n  return <Component {...step} onDone={handleDone} />\n}\n\nexport default Game\n","import stringSimilarity from \"string-similarity\"\nimport { message } from \"antd\"\n\nexport const compareStrings = (a, b) => {\n  const similarity = stringSimilarity.compareTwoStrings(b.toLowerCase(), a.toLowerCase())\n  console.log(similarity)\n  return similarity\n}\n\nexport const shiftChars = (str, amount, min, max) => {\n  return str\n    .split(\"\")\n    .map((a) => {\n      const code = a.charCodeAt(0)\n      if (code >= min && code <= max) {\n        let res = code + amount\n        const diff = max - min\n        if (res > max) {\n          res -= diff + 1\n        } else if (res < min) {\n          res += diff + 1\n        }\n        return String.fromCharCode(res)\n      }\n      return a\n    })\n    .join(\"\")\n}\n\nexport const encodeObj = (obj) => encode(JSON.stringify(obj))\nexport const decodeObj = (str) => JSON.parse(decode(str))\n\nexport const encode = (str) => {\n  str = shiftChars(str, 1, 97, 122)\n  str = shiftChars(str, 5, 60, 90)\n  str = lzw_encode(str)\n  str = encodeURIComponent(str)\n  return str\n}\n\nexport const decode = (str) => {\n  str = decodeURIComponent(str)\n  str = lzw_decode(str)\n  str = shiftChars(str, -5, 60, 90)\n  str = shiftChars(str, -1, 97, 122)\n  return str\n}\n\nexport const copyToClipboard = (str) => {\n  const el = document.createElement(\"textarea\")\n  el.value = str\n  document.body.appendChild(el)\n  el.select()\n  document.execCommand(\"copy\")\n  document.body.removeChild(el)\n  message.success(\"URL Copied\")\n}\n\n// LZW-compress a string\nfunction lzw_encode(s) {\n  var dict = {}\n  var data = (s + \"\").split(\"\")\n  var out = []\n  var currChar\n  var phrase = data[0]\n  var code = 256\n  for (let i = 1; i < data.length; i++) {\n    currChar = data[i]\n    if (dict[phrase + currChar] != null) {\n      phrase += currChar\n    } else {\n      out.push(phrase.length > 1 ? dict[phrase] : phrase.charCodeAt(0))\n      dict[phrase + currChar] = code\n      code++\n      phrase = currChar\n    }\n  }\n  out.push(phrase.length > 1 ? dict[phrase] : phrase.charCodeAt(0))\n  for (let i = 0; i < out.length; i++) {\n    out[i] = String.fromCharCode(out[i])\n  }\n  return out.join(\"\")\n}\n\n// Decompress an LZW-encoded string\nfunction lzw_decode(s) {\n  var dict = {}\n  var data = (s + \"\").split(\"\")\n  var currChar = data[0]\n  var oldPhrase = currChar\n  var out = [currChar]\n  var code = 256\n  var phrase\n  for (var i = 1; i < data.length; i++) {\n    var currCode = data[i].charCodeAt(0)\n    if (currCode < 256) {\n      phrase = data[i]\n    } else {\n      phrase = dict[currCode] ? dict[currCode] : oldPhrase + currChar\n    }\n    out.push(phrase)\n    currChar = phrase.charAt(0)\n    dict[code] = oldPhrase + currChar\n    code++\n    oldPhrase = phrase\n  }\n  return out.join(\"\")\n}\n"],"sourceRoot":""}